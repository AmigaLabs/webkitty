diff -ruN ffmpeg-2.8.15_orig/build.sh ffmpeg-2.8.15/build.sh
--- ffmpeg-2.8.15_orig/build.sh	1970-01-01 01:00:00.000000000 +0100
+++ ffmpeg-2.8.15/build.sh	2020-12-20 04:02:51.122508475 +0100
@@ -0,0 +1,4 @@
+#!/bin/sh
+export CFLAGS="-noixemul -O3"
+export LDFLAGS="-noixemul"
+./configure --cc=/gg/bin/ppc-morphos-gcc-9 --ld=/gg/bin/ppc-morphos-gcc-9 --enable-cross-compile --cross-prefix=/gg/bin/ --arch=powerpc --cpu=powerpc --target-os=linux --enable-runtime-cpudetect --enable-memalign-hack --disable-pthreads --disable-shared --disable-indevs --disable-protocols --enable-protocol=file --disable-network --disable-encoders --disable-decoders --disable-hwaccels --disable-muxers --disable-demuxers --disable-parsers --disable-bsfs --disable-devices --disable-filters --enable-decoder=aac --enable-decoder=aac_latm --enable-decoder=h264 --enable-decoder=mp3 --enable-decoder=theora --enable-decoder=vorbis --enable-demuxer=aac --enable-demuxer=aac_latm --enable-parser=aac --enable-parser=aac_latm --enable-demuxer=mp3 --enable-demuxer=mov --enable-demuxer=ogg --enable-parser=mpegaudio --enable-bsf=h264_mp4toannexb --enable-decoder=pcm --enable-decoder=wav --enable-demuxer=flv --enable-decoder=flv --enable-decoder=h263 --enable-decoder=vp8 --enable-demuxer=vp8 --enable-parser=vp8  --enable-decoder=vp9 --enable-demuxer=vp9 --enable-parser=vp9 --enable-bsf=aac_adtstoasc --enable-decoder=mpeg4 --enable-parser=mpeg4video
\ No newline at end of file
diff -ruN ffmpeg-2.8.15_orig/cmdutils.c ffmpeg-2.8.15/cmdutils.c
--- ffmpeg-2.8.15_orig/cmdutils.c	2018-07-16 12:59:57.000000000 +0200
+++ ffmpeg-2.8.15/cmdutils.c	2020-12-20 04:02:51.122508475 +0100
@@ -58,7 +58,7 @@
 #endif
 #if HAVE_SYS_RESOURCE_H
 #include <sys/time.h>
-#include <sys/resource.h>
+//#include <sys/resource.h>
 #endif
 #if HAVE_SETDLLDIRECTORY
 #include <windows.h>
diff -ruN ffmpeg-2.8.15_orig/config.altivec ffmpeg-2.8.15/config.altivec
--- ffmpeg-2.8.15_orig/config.altivec	1970-01-01 01:00:00.000000000 +0100
+++ ffmpeg-2.8.15/config.altivec	2020-12-20 04:02:51.122508475 +0100
@@ -0,0 +1,39 @@
+ALTIVEC_CFLAGS=-maltivec -mabi=altivec
+
+ALTIVEC_OBJECTS=\
+	libavcodec/ppc/blockdsp.o \
+	libavcodec/ppc/fdctdsp.o \
+	libavcodec/ppc/fft_init.o \
+	libavcodec/ppc/fft_vsx.o \
+	libavcodec/ppc/idctdsp.o \
+	libavcodec/ppc/me_cmp.o \
+	libavcodec/ppc/mpegvideodsp.o \
+	libavcodec/ppc/pixblockdsp.o \
+	libavcodec/ppc/dsputil_altivec.o \
+	libavcodec/ppc/fdct_altivec.o \
+	libavcodec/ppc/fft_altivec.o \
+	libavcodec/ppc/float_altivec.o \
+	libavcodec/ppc/fmtconvert_altivec.o \
+	libavcodec/ppc/gmc_altivec.o \
+	libavcodec/ppc/h264_altivec.o \
+	libavcodec/ppc/h264chroma_init.o \
+	libavcodec/ppc/h264dsp.o \
+	libavcodec/ppc/h264qpel.o \
+	libavcodec/ppc/hpeldsp_altivec.o \
+	libavcodec/ppc/idct_altivec.o \
+	libavcodec/ppc/int_altivec.o \
+	libavcodec/ppc/mpegaudiodec_altivec.o \
+	libavcodec/ppc/mpegaudiodsp_altivec.o \
+	libavcodec/ppc/mpegvideo_altivec.o \
+	libavcodec/ppc/vorbisdsp_altivec.o \
+	libavcodec/ppc/vp3dsp_altivec.o \
+	libavcodec/ppc/vp8dsp_altivec.o \
+	\
+	libavutil/ppc/float_dsp_altivec.o \
+	\
+	libswscale/ppc/swscale_altivec.o \
+	libswscale/ppc/yuv2rgb_altivec.o \
+	libswscale/ppc/yuv2yuv_altivec.o \
+
+$(ALTIVEC_OBJECTS): CFLAGS+=$(ALTIVEC_CFLAGS)
+
diff -ruN ffmpeg-2.8.15_orig/configure ffmpeg-2.8.15/configure
--- ffmpeg-2.8.15_orig/configure	2018-07-16 12:59:57.000000000 +0200
+++ ffmpeg-2.8.15/configure	2020-12-20 04:03:19.266704172 +0100
@@ -5255,7 +5255,6 @@
                                check_lib openjpeg-1.5/openjpeg.h opj_version -lopenjpeg -DOPJ_STATIC ||
                                check_lib openjpeg.h opj_version -lopenjpeg -DOPJ_STATIC ||
                                die "ERROR: libopenjpeg not found"; }
-enabled libopus           && require_pkg_config opus opus_multistream.h opus_multistream_decoder_create
 enabled libpulse          && require_pkg_config libpulse pulse/pulseaudio.h pa_context_new
 enabled libquvi           && require_pkg_config libquvi quvi/quvi.h quvi_init
 enabled librtmp           && require_pkg_config librtmp librtmp/rtmp.h RTMP_Socket
diff -ruN ffmpeg-2.8.15_orig/ffmpeg-a12b4bd107cf028e44cab8dafca61a866cecd252/build.sh ffmpeg-2.8.15/ffmpeg-a12b4bd107cf028e44cab8dafca61a866cecd252/build.sh
--- ffmpeg-2.8.15_orig/ffmpeg-a12b4bd107cf028e44cab8dafca61a866cecd252/build.sh	1970-01-01 01:00:00.000000000 +0100
+++ ffmpeg-2.8.15/ffmpeg-a12b4bd107cf028e44cab8dafca61a866cecd252/build.sh	2020-12-20 04:02:43.242453671 +0100
@@ -0,0 +1,4 @@
+#!/bin/sh
+export CFLAGS="-noixemul -O3"
+export LDFLAGS="-noixemul"
+./configure --cc=/gg/bin/ppc-morphos-gcc-9 --ld=/gg/bin/ppc-morphos-gcc-9 --enable-cross-compile --cross-prefix=/gg/bin/ --arch=powerpc --cpu=powerpc --target-os=linux --enable-runtime-cpudetect --enable-memalign-hack --disable-pthreads --disable-shared --disable-indevs --disable-protocols --enable-protocol=file --disable-network --disable-encoders --disable-decoders --disable-hwaccels --disable-muxers --disable-demuxers --disable-parsers --disable-bsfs --disable-devices --disable-filters --enable-decoder=aac --enable-decoder=aac_latm --enable-decoder=h264 --enable-decoder=mp3 --enable-decoder=theora --enable-decoder=vorbis --enable-demuxer=aac --enable-demuxer=aac_latm --enable-parser=aac --enable-parser=aac_latm --enable-demuxer=mp3 --enable-demuxer=mov --enable-demuxer=ogg --enable-parser=mpegaudio --enable-bsf=h264_mp4toannexb --enable-decoder=pcm --enable-decoder=wav --enable-demuxer=flv --enable-decoder=flv --enable-decoder=h263 --enable-decoder=vp8 --enable-demuxer=vp8 --enable-parser=vp8  --enable-decoder=vp9 --enable-demuxer=vp9 --enable-parser=vp9 --enable-bsf=aac_adtstoasc --enable-decoder=mpeg4 --enable-parser=mpeg4video
\ No newline at end of file
diff -ruN ffmpeg-2.8.15_orig/ffmpeg.c ffmpeg-2.8.15/ffmpeg.c
--- ffmpeg-2.8.15_orig/ffmpeg.c	2018-07-16 13:00:05.000000000 +0200
+++ ffmpeg-2.8.15/ffmpeg.c	2020-12-20 04:02:51.122508475 +0100
@@ -89,6 +89,7 @@
 #include <sys/select.h>
 #endif
 
+#define HAVE_TERMIOS_H 0
 #if HAVE_TERMIOS_H
 #include <fcntl.h>
 #include <sys/ioctl.h>
diff -ruN ffmpeg-2.8.15_orig/libavcodec/ppc/fft_altivec.S ffmpeg-2.8.15/libavcodec/ppc/fft_altivec.S
--- ffmpeg-2.8.15_orig/libavcodec/ppc/fft_altivec.S	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libavcodec/ppc/fft_altivec.S	2020-12-20 04:02:51.122508475 +0100
@@ -131,12 +131,12 @@
     vmrglw  \d1,\s0,\s1
 .endm
 
-.macro def_fft4 interleave
-fft4\interleave\()_altivec:
+.macro def_fft4 interleave, suffix
+fft4\suffix\()_altivec:
     lvx    v0, 0,r3
     lvx    v1,r9,r3
     FFT4   v0,v1,v2,v3
-.ifnb \interleave
+.if \interleave
     zip    v0,v1,v2,v3
     stvx   v0, 0,r3
     stvx   v1,r9,r3
@@ -147,15 +147,15 @@
     blr
 .endm
 
-.macro def_fft8 interleave
-fft8\interleave\()_altivec:
+.macro def_fft8 interleave, suffix
+fft8\suffix\()_altivec:
     addi   r4,r3,32
     lvx    v0, 0,r3
     lvx    v1,r9,r3
     lvx    v2, 0,r4
     lvx    v3,r9,r4
     FFT8   v0,v1,v2,v3,v4,v5,v6,v7,v8
-.ifnb \interleave
+.if \interleave
     zip    v4,v5,v0,v1
     zip    v6,v7,v2,v3
     stvx   v4, 0,r3
@@ -171,8 +171,8 @@
     blr
 .endm
 
-.macro def_fft16 interleave
-fft16\interleave\()_altivec:
+.macro def_fft16 interleave, suffix
+fft16\suffix\()_altivec:
     addi   r5,r3,64
     addi   r6,r3,96
     addi   r4,r3,32
@@ -200,7 +200,7 @@
     BF     v3,v7,v3,v12
     BF     v1,v5,v1,v11
     BF     v2,v6,v2,v13
-.ifnb \interleave
+.if \interleave
     zip     v8, v9,v0,v1
     zip    v10,v11,v2,v3
     zip    v12,v13,v4,v5
@@ -335,6 +335,71 @@
     vcprm(0,2,s1,s3)
     vcprm(1,3,s0,s2)
 
+.macro lvm8  b, reg01, reg02, reg03, reg04, reg05, reg06, reg07, reg08
+    lvx     \reg01, 0, \b
+    addi    \b, \b, 16
+    lvx     \reg02, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg03, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg04, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg05, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg06, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg07, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg08, 0, \b
+    addi    \b, \b, 16
+.endm
+
+.macro lvm10  b, reg01, reg02, reg03, reg04, reg05, reg06, reg07, reg08, reg09, reg10
+    lvx     \reg01, 0, \b
+    addi    \b, \b, 16
+    lvx     \reg02, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg03, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg04, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg05, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg06, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg07, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg08, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg09, 0, \b
+    addi    \b, \b, 16
+	lvx     \reg10, 0, \b
+    addi    \b, \b, 16
+.endm
+
+.macro stvm10 b, reg01, reg02, reg03, reg04, reg05, reg06, reg07, reg08, reg09, reg10
+	stvx    \reg01, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg02, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg03, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg04, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg05, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg06, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg07, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg08, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg09, 0, \b
+    addi    \b, \b, 16
+	stvx    \reg10, 0, \b
+    addi    \b, \b, 16
+.endm
+
 .macro lvm  b, r, regs:vararg
     lvx     \r, 0, \b
     addi    \b, \b, 16
@@ -358,15 +423,15 @@
     stpu    r1, -(160+16*PS)(r1)
     get_got r11
     addi    r6, r1, 16*PS
-    stvm    r6, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29
+	stvm10  r6, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29
     mfvrsave r0
     stw     r0, 15*PS(r1)
     li      r6, 0xfffffffc
     mtvrsave r6
 
     movrel  r6, fft_data, r11
-    lvm     r6, v14, v15, v16, v17, v18, v19, v20, v21
-    lvm     r6, v22, v23, v24, v25, v26, v27, v28, v29
+	lvm8    r6, v14, v15, v16, v17, v18, v19, v20, v21
+	lvm8    r6, v22, v23, v24, v25, v26, v27, v28, v29
 
     li      r9, 16
     movrel  r12, X(ff_cos_tabs), r11
@@ -381,7 +446,7 @@
     bctrl
 
     addi    r6, r1, 16*PS
-    lvm     r6, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29
+	lvm10   r6, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29
     lwz     r6, 15*PS(r1)
     mtvrsave r6
     lp      r1, 0(r1)
@@ -409,9 +474,9 @@
 
 .macro DECL_FFTS interleave, suffix
     .text
-    def_fft4  \suffix
-    def_fft8  \suffix
-    def_fft16 \suffix
+	def_fft4  \interleave, \suffix
+	def_fft8  \interleave, \suffix
+	def_fft16 \interleave, \suffix
     PASS \interleave, \suffix
     DECL_FFT \suffix, 5,   32,   16,    8
     DECL_FFT \suffix, 6,   64,   32,   16
diff -ruN ffmpeg-2.8.15_orig/libavcodec/utils.c ffmpeg-2.8.15/libavcodec/utils.c
--- ffmpeg-2.8.15_orig/libavcodec/utils.c	2018-07-16 13:00:05.000000000 +0200
+++ ffmpeg-2.8.15/libavcodec/utils.c	2020-12-20 04:02:51.126508502 +0100
@@ -113,6 +113,41 @@
     return 1;
 }
 static int (*lockmgr_cb)(void **mutex, enum AVLockOp op) = default_lockmgr_cb;
+#elif defined(__MORPHOS__)
+#include <proto/exec.h>
+static int default_lockmgr_cb(void **arg, enum AVLockOp op)
+{
+    void * volatile * mutex = arg;
+    int err;
+
+    switch (op) {
+    case AV_LOCK_CREATE:
+        return 0;
+    case AV_LOCK_OBTAIN:
+        if (!*mutex) {
+	    struct SignalSemaphore *tmp = av_malloc(sizeof(struct SignalSemaphore));
+            if (!tmp)
+                return AVERROR(ENOMEM);
+	    InitSemaphore(tmp);
+            if (avpriv_atomic_ptr_cas(mutex, NULL, tmp)) {
+                av_free(tmp);
+            }
+        }
+
+	ObtainSemaphore((struct SignalSemaphore *)*mutex);
+
+        return 0;
+    case AV_LOCK_RELEASE:
+	ReleaseSemaphore((struct SignalSemaphore *)*mutex);
+        return 0;
+    case AV_LOCK_DESTROY:
+        av_free(*mutex);
+        avpriv_atomic_ptr_cas(mutex, *mutex, NULL);
+        return 0;
+    }
+    return 1;
+}
+static int (*lockmgr_cb)(void **mutex, enum AVLockOp op) = default_lockmgr_cb;
 #else
 static int (*lockmgr_cb)(void **mutex, enum AVLockOp op) = NULL;
 #endif
diff -ruN ffmpeg-2.8.15_orig/libavformat/libmodplug.c ffmpeg-2.8.15/libavformat/libmodplug.c
--- ffmpeg-2.8.15_orig/libavformat/libmodplug.c	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libavformat/libmodplug.c	2020-12-20 04:02:51.126508502 +0100
@@ -225,7 +225,11 @@
     avpriv_set_pts_info(st, 64, 1, 1000);
     st->duration = ModPlug_GetLength(modplug->f);
     st->codec->codec_type  = AVMEDIA_TYPE_AUDIO;
+#ifdef __MORPHOS__
+    st->codec->codec_id    = AV_CODEC_ID_PCM_S16BE;
+#else
     st->codec->codec_id    = AV_CODEC_ID_PCM_S16LE;
+#endif
     st->codec->channels    = settings.mChannels;
     st->codec->sample_rate = settings.mFrequency;
 
diff -ruN ffmpeg-2.8.15_orig/libavformat/network.c ffmpeg-2.8.15/libavformat/network.c
--- ffmpeg-2.8.15_orig/libavformat/network.c	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libavformat/network.c	2020-12-20 04:02:51.126508502 +0100
@@ -27,6 +27,10 @@
 #include "libavutil/mem.h"
 #include "libavutil/time.h"
 
+#ifdef __MORPHOS__
+#define D(x)
+#endif
+
 int ff_tls_init(void)
 {
 #if CONFIG_TLS_OPENSSL_PROTOCOL
@@ -67,6 +71,24 @@
     if (WSAStartup(MAKEWORD(1,1), &wsaData))
         return 0;
 #endif
+
+#ifdef __MORPHOS__
+    if(!ffmpegSocketBase)
+    {
+		D(kprintf("Opening ffmpeg socketbase\n"));
+		ffmpegSocketBase = SocketBase = OpenLibrary("bsdsocket.library", 0);
+
+        if(ffmpegSocketBase)
+        {
+            if(MySocketBaseTags(
+                SBTM_SETVAL(SBTC_ERRNOPTR(sizeof(errno))), (ULONG) &errno,
+				//SBTM_SETVAL(SBTC_HERRNOLONGPTR), (ULONG) &h_errno,
+				SBTM_SETVAL(SBTC_LOGTAGPTR), (ULONG) "ffmpeg",
+            TAG_DONE))
+			return 0;
+        }
+    }
+#endif
     return 1;
 }
 
@@ -104,6 +126,15 @@
 #if HAVE_WINSOCK2_H
     WSACleanup();
 #endif
+
+#ifdef __MORPHOS__
+    if(ffmpegSocketBase)
+    {
+		D(kprintf("Closing ffmpeg socketbase\n"));
+        CloseLibrary(ffmpegSocketBase);
+        ffmpegSocketBase = SocketBase = NULL;
+    }
+#endif
 }
 
 #if HAVE_WINSOCK2_H
diff -ruN ffmpeg-2.8.15_orig/libavformat/network.h ffmpeg-2.8.15/libavformat/network.h
--- ffmpeg-2.8.15_orig/libavformat/network.h	2018-07-08 12:25:25.000000000 +0200
+++ ffmpeg-2.8.15/libavformat/network.h	2020-12-20 04:02:51.126508502 +0100
@@ -21,6 +21,12 @@
 #ifndef AVFORMAT_NETWORK_H
 #define AVFORMAT_NETWORK_H
 
+#ifdef __MORPHOS__
+#undef SOCKET_BASE_NAME
+#define SOCKET_BASE_NAME ffmpegSocketBase
+extern struct Library *ffmpegSocketBase;
+#endif
+
 #include <errno.h>
 #include <stdint.h>
 
@@ -72,6 +78,48 @@
 #include <poll.h>
 #endif
 
+#ifdef __MORPHOS__
+#include <proto/exec.h>
+#include <stdarg.h>
+#include <proto/socket.h>
+#include <amitcp/socketbasetags.h>
+#include <clib/debug_protos.h>
+
+
+#define MySocketBaseTagList(__p0) \
+        LP1(294, LONG , SocketBaseTagList, \
+                struct TagItem *, __p0, a0, \
+                , ffmpegSocketBase, 0, 0, 0, 0, 0, 0)
+
+#define MySocketBaseTags(...) \
+        ({ULONG _tags[] = { __VA_ARGS__ }; \
+        MySocketBaseTagList((struct TagItem *)_tags);})
+
+#define MyWaitSelect(__p0, __p1, __p2, __p3, __p4, __p5) \
+        LP6(126, LONG , WaitSelect, \
+                LONG , __p0, d0, \
+                fd_set *, __p1, a0, \
+                fd_set *, __p2, a1, \
+                fd_set *, __p3, a2, \
+                struct timeval *, __p4, a3, \
+                ULONG *, __p5, d1, \
+                , ffmpegSocketBase, 0, 0, 0, 0, 0, 0)
+
+#define MyIoctlSocket(__p0, __p1, __p2) \
+	LP3(114, LONG , IoctlSocket, \
+		LONG , __p0, d0, \
+		ULONG , __p1, d1, \
+		char *, __p2, a0, \
+		, ffmpegSocketBase, 0, 0, 0, 0, 0, 0)
+
+static int myselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exeptfds,
+     struct timeval *timeout)
+{
+  return MyWaitSelect(nfds, readfds, writefds, exeptfds, timeout, NULL);
+}
+
+#endif
+
 int ff_socket_nonblock(int socket, int enable);
 
 extern int ff_network_inited_globally;
diff -ruN ffmpeg-2.8.15_orig/libavformat/os_support.c ffmpeg-2.8.15/libavformat/os_support.c
--- ffmpeg-2.8.15_orig/libavformat/os_support.c	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libavformat/os_support.c	2020-12-20 04:02:51.126508502 +0100
@@ -41,6 +41,10 @@
 #endif /* HAVE_WINSOCK2_H */
 #endif /* !HAVE_POLL_H */
 
+#if defined(__MORPHOS__)
+#include <sys/fileio.h>
+#endif
+
 #include "network.h"
 
 #if !HAVE_INET_ATON
@@ -257,6 +261,9 @@
 #if HAVE_WINSOCK2_H
     u_long param = enable;
     return ioctlsocket(socket, FIONBIO, &param);
+#elif defined(__MORPHOS__)
+    char on = (char) enable; 
+    return MyIoctlSocket(socket, FIONBIO, (char *)&on);  
 #else
     if (enable)
         return fcntl(socket, F_SETFL, fcntl(socket, F_GETFL) | O_NONBLOCK);
@@ -313,12 +320,12 @@
         return 0;
 
     if (timeout < 0) {
-        rc = select(n, &read_set, &write_set, &exception_set, NULL);
+        rc = myselect(n, &read_set, &write_set, &exception_set, NULL);
     } else {
         struct timeval tv;
         tv.tv_sec  = timeout / 1000;
         tv.tv_usec = 1000 * (timeout % 1000);
-        rc         = select(n, &read_set, &write_set, &exception_set, &tv);
+        rc         = myselect(n, &read_set, &write_set, &exception_set, &tv);
     }
 
     if (rc < 0)
diff -ruN ffmpeg-2.8.15_orig/libavformat/tcp.c ffmpeg-2.8.15/libavformat/tcp.c
--- ffmpeg-2.8.15_orig/libavformat/tcp.c	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libavformat/tcp.c	2020-12-20 04:02:51.126508502 +0100
@@ -213,6 +213,19 @@
     return ret < 0 ? ff_neterrno() : ret;
 }
 
+#ifdef __MORPHOS__
+enum
+{
+    SHUT_RD = 0,/* No more receptions.  */
+#define SHUT_RD SHUT_RD
+    SHUT_WR,/* No more transmissions.  */
+#define SHUT_WR SHUT_WR
+    SHUT_RDWR/* No more receptions or transmissions.  */
+#define SHUT_RDWR SHUT_RDWR
+};
+#endif  
+
+
 static int tcp_shutdown(URLContext *h, int flags)
 {
     TCPContext *s = h->priv_data;
diff -ruN ffmpeg-2.8.15_orig/libavutil/ppc/cpu.c ffmpeg-2.8.15/libavutil/ppc/cpu.c
--- ffmpeg-2.8.15_orig/libavutil/ppc/cpu.c	2018-07-09 20:25:18.000000000 +0200
+++ ffmpeg-2.8.15/libavutil/ppc/cpu.c	2020-12-20 04:02:51.126508502 +0100
@@ -31,6 +31,13 @@
 #include <sys/param.h>
 #include <sys/sysctl.h>
 #include <machine/cpu.h>
+#elif __MORPHOS__
+#include <exec/exec.h>
+#include <exec/system.h>
+#include <proto/exec.h>
+
+int altivec_disabled;
+
 #elif defined(__AMIGAOS4__)
 #include <exec/exec.h>
 #include <interfaces/exec.h>
@@ -56,6 +63,27 @@
     if (result == VECTORTYPE_ALTIVEC)
         return AV_CPU_FLAG_ALTIVEC;
     return 0;
+#elif defined(__MORPHOS__)
+	ULONG result = 0;
+	if (altivec_disabled || !(NewGetSystemAttrs(&result, sizeof(result), SYSTEMINFOTYPE_PPC_ALTIVEC, TAG_DONE) ))
+	{
+		result = 0; // If NewGetSystemAttrs fails then I consider caps->hasAltiVec
+					// as undefined and prefer to set it
+    }
+	else
+	{
+		if ((((struct ExecBase *)SysBase)->LibNode.lib_Version == 50 &&
+		  ((struct ExecBase *)SysBase)->LibNode.lib_Revision >= 61) ||
+		  ((struct ExecBase *)SysBase)->LibNode.lib_Version > 50)
+		{
+		}
+		else
+		{
+			result = 0;
+		}
+	}
+	//kprintf("Has AltiVec: %d\n", result);
+	return result != 0 ? AV_CPU_FLAG_ALTIVEC : 0;
 #elif defined(__APPLE__) || defined(__OpenBSD__)
 #ifdef __OpenBSD__
     int sels[2] = {CTL_MACHDEP, CPU_ALTIVEC};
diff -ruN ffmpeg-2.8.15_orig/libswscale/ppc/yuv2rgb_altivec.c ffmpeg-2.8.15/libswscale/ppc/yuv2rgb_altivec.c
--- ffmpeg-2.8.15_orig/libswscale/ppc/yuv2rgb_altivec.c	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libswscale/ppc/yuv2rgb_altivec.c	2020-12-20 04:02:51.126508502 +0100
@@ -602,7 +602,7 @@
     return NULL;
 }
 
-av_cold void ff_yuv2rgb_init_tables_ppc(SwsContext *c,
+static av_cold void __attribute__ ((noinline)) ff_yuv2rgb_init_tables_altivec(SwsContext *c,
                                         const int inv_table[4],
                                         int brightness,
                                         int contrast,
@@ -635,6 +635,18 @@
 #endif /* HAVE_ALTIVEC */
 }
 
+av_cold void ff_yuv2rgb_init_tables_ppc(SwsContext *c,
+                                        const int inv_table[4],
+                                        int brightness,
+                                        int contrast,
+                                        int saturation)
+{
+#if HAVE_ALTIVEC
+    if (av_get_cpu_flags() & AV_CPU_FLAG_ALTIVEC)
+        ff_yuv2rgb_init_tables_altivec(c, inv_table, brightness, contrast, saturation);
+#endif /* HAVE_ALTIVEC */
+}
+
 #if HAVE_ALTIVEC
 
 static av_always_inline void yuv2packedX_altivec(SwsContext *c,
diff -ruN ffmpeg-2.8.15_orig/libswscale/swscale_internal.h ffmpeg-2.8.15/libswscale/swscale_internal.h
--- ffmpeg-2.8.15_orig/libswscale/swscale_internal.h	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libswscale/swscale_internal.h	2020-12-20 04:02:51.126508502 +0100
@@ -23,9 +23,13 @@
 
 #include "config.h"
 
+#ifdef __ALTIVEC__
 #if HAVE_ALTIVEC_H
 #include <altivec.h>
 #endif
+#endif
+
+typedef struct { unsigned int foo[4]; } av_placeholder __attribute__((aligned(16)));
 
 #include "version.h"
 
@@ -501,6 +505,7 @@
     const uint8_t *chrDither8, *lumDither8;
 
 #if HAVE_ALTIVEC
+#ifdef __ALTIVEC__
     vector signed short   CY;
     vector signed short   CRV;
     vector signed short   CBU;
@@ -509,6 +514,16 @@
     vector signed short   OY;
     vector unsigned short CSHIFT;
     vector signed short  *vYCoeffsBank, *vCCoeffsBank;
+#else
+    av_placeholder CY;
+    av_placeholder CRV;
+    av_placeholder CBU;
+    av_placeholder CGU;
+    av_placeholder CGV;
+    av_placeholder OY;
+    av_placeholder CSHIFT;
+    av_placeholder *vYCoeffsBank, *vCCoeffsBank;
+#endif
 #endif
 
     int use_mmx_vfilter;
diff -ruN ffmpeg-2.8.15_orig/libswscale/utils.c ffmpeg-2.8.15/libswscale/utils.c
--- ffmpeg-2.8.15_orig/libswscale/utils.c	2018-07-16 12:59:59.000000000 +0200
+++ ffmpeg-2.8.15/libswscale/utils.c	2020-12-20 04:02:51.126508502 +0100
@@ -1637,8 +1637,13 @@
             goto fail;
 
 #if HAVE_ALTIVEC
+#ifdef __ALTIVEC__
         FF_ALLOC_OR_GOTO(c, c->vYCoeffsBank, sizeof(vector signed short) * c->vLumFilterSize * c->dstH,    fail);
         FF_ALLOC_OR_GOTO(c, c->vCCoeffsBank, sizeof(vector signed short) * c->vChrFilterSize * c->chrDstH, fail);
+#else
+        FF_ALLOC_OR_GOTO(c, c->vYCoeffsBank, sizeof(av_placeholder) * c->vLumFilterSize * c->dstH,    fail);
+        FF_ALLOC_OR_GOTO(c, c->vCCoeffsBank, sizeof(av_placeholder) * c->vChrFilterSize * c->chrDstH, fail);
+#endif
 
         for (i = 0; i < c->vLumFilterSize * c->dstH; i++) {
             int j;
